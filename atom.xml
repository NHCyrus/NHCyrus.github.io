<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NHCyrus&#39;Blog</title>
  
  <subtitle>KeepGlow</subtitle>
  <link href="http://nhcyrus.top/atom.xml" rel="self"/>
  
  <link href="http://nhcyrus.top/"/>
  <updated>2022-09-04T01:49:19.549Z</updated>
  <id>http://nhcyrus.top/</id>
  
  <author>
    <name>NHCyrus</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>选择排序</title>
    <link href="http://nhcyrus.top/posts/43d00a99.html"/>
    <id>http://nhcyrus.top/posts/43d00a99.html</id>
    <published>2022-09-04T09:17:25.000Z</published>
    <updated>2022-09-04T01:49:19.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><blockquote><p>内容主要来源于《大话数据结构》和《算法导论》 图片来源于CSDN 英雄哪里出来</p></blockquote><hr><h2 id="什么是选择排序"><a href="#什么是选择排序" class="headerlink" title="什么是选择排序"></a>什么是选择排序</h2><p>相信大家都知道炒股。炒股想要赚钱就必须要在低价的时候买入，高价的时候卖出。而大家的炒股习惯可以分为两种，一种是经常性的买入卖出，稍微涨一点或者是降一点就进行交易。而另外一种人就有耐心的多，在低价时购入后，耐心等待，直到出现他所认为的高价时，将其卖出。而选择排序就是更加偏向后者。</p><p>选择排序的排序过程:</p><p><a href="/img/xuanze.gif">alt 选择排序</a></p><hr><h2 id="选择排序的实现"><a href="#选择排序的实现" class="headerlink" title="选择排序的实现"></a>选择排序的实现</h2><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">伪代码</button></li><li class="tab"><button type="button" data-href="#tabs1-2">C语言</button></li><li class="tab"><button type="button" data-href="#tabs1-3">Java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for i = 0 to arr.length</span><br><span class="line">int j = i + 1 ，min = arr[i] , pos = i</span><br><span class="line">while(j &lt;= arr.length)</span><br><span class="line">if(min &gt; arr[j])</span><br><span class="line">pos = j</span><br><span class="line">j= j + 1</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[pos]</span><br><span class="line">    arr[pos] = temp</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> *arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> j = i + <span class="number">1</span>, min = arr[i] , pos = i;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; <span class="keyword">sizeof</span> arr / <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[pos] = arr[i];</span><br><span class="line">        arr[i] = min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i] , pos = i ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( min &gt; arr[j]) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[pos];</span><br><span class="line">        arr[pos] = temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> test : arr) &#123;</span><br><span class="line">            System.out.print(test + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>定义变量min用来记录最小值  pos用来记录最小值的下标</p><p>while循环遍历整个数据 每当发现有值比min小时 就将这个值设置为最新的最小值，记录其下标</p><p>当遍历完成时 将最小值和第一为进行交换</p></blockquote><hr><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>选择排序算法中有一个嵌套循环，外循环执行n - 1次。内循环受外循环的影响.</p><blockquote><p>当外层进行第一次循环时 内层进行n - 1次比较</p><p>当外层进行第二次循环时 内层进行n - 2次比较</p><p>· · · · · ·</p><p>当外层进行n - 2次循环时 内层进行1次比较</p><p>当外层进行n - 1次循环时 内层进行0次比较</p></blockquote><p>我们假设比较的时间复杂度为O(1) </p><p>时间复杂度为 0 + 1 + · · · + (n - 1) + (n - 2) = n X (n - 1) / 2 即 O(n^2^)。</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>申请两个空间去存储临时变量，这空间复杂度为O(1)。</p><hr><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>内部循环的目的是找到最小值。是一个动态规划的最值问题。可以用==线段树==来进行优化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;内容主要来源于《大话数据结构》和《算法导论》 图片来源于CSDN 英雄哪里出来&lt;/p&gt;
&lt;/blo</summary>
      
    
    
    
    <category term="算法" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="算法" scheme="http://nhcyrus.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="选择排序" scheme="http://nhcyrus.top/tags/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://nhcyrus.top/posts/96555fb2.html"/>
    <id>http://nhcyrus.top/posts/96555fb2.html</id>
    <published>2022-09-04T09:17:15.000Z</published>
    <updated>2022-09-04T01:49:19.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><blockquote><p>内容来源《大话数据结构》和《算法导论》 图片源于 CSDN 英雄哪里出来</p></blockquote><hr><h2 id="什么是插入排序"><a href="#什么是插入排序" class="headerlink" title="什么是插入排序"></a>什么是插入排序</h2><p>扑克牌是一个非常流行的游戏，而想要赢下扑克牌就需要我们弄清楚我们手中的牌，从而我们需要理牌。可以说无论你玩没玩过扑克牌，理牌的方式大多都是相同的，将一个牌插入到一堆有序牌中，这个方法就可以简单的认为是插入排序。</p><p><a href="/img/charu.gif">alt 插入排序</a></p><p>上图就是插入排序的排序过程</p><hr><h2 id="插入排序的实现"><a href="#插入排序的实现" class="headerlink" title="插入排序的实现"></a>插入排序的实现</h2><div class="tabs" id="tabs1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs1-1">伪代码</button></li><li class="tab"><button type="button" data-href="#tabs1-2">C语言</button></li><li class="tab"><button type="button" data-href="#tabs1-3">Java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for j = 1  to arr.length</span><br><span class="line"> int i = j - 1  temp = arr[j]</span><br><span class="line"> while(i &gt;= 0 and arr[i] &gt; temp )</span><br><span class="line"> arr[i + 1] = arr[i]</span><br><span class="line"> i--</span><br><span class="line"> arr[i + 1] = temp</span><br><span class="line">     </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span> *arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span> , temp = arr[i];</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs1-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">          <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i] , j = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j]) &#123;</span><br><span class="line">              arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">              j--;</span><br><span class="line">          &#125;</span><br><span class="line">          arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> test : arr) &#123;</span><br><span class="line">              System.out.print(test + <span class="string">&quot; &quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> dp : arr) &#123;</span><br><span class="line">          System.out.println(dp);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>看不懂没关系，我将用一个例子来为你讲解一下大概过程</p><p>我们定义一个无序数组[ 6 , 3 , 5 , 2 , 9 , 7]</p><p>我们令j从1开始 则 arr[j] 是3 arr[i]是 6  用一个temp值去记下当前arr[j]的值</p><p>进入while循环 while循环结束的条件是 i走向了-1 此时 arr[j]的左边已经到头了 又或者是当前 arr[i] 比temp值小 也就是说从数组开始到 i +1 这个位置temp的值都是最大的 因此结束本次while循环 因为i的定义就是 j  - 1 因此 arr[ i +  1 ] = temp 其实就是相当于 将arr[j]  = arr[j] （这种情况仅限于 j位于数组的第二位，而恰巧数组第一位的数也比他小.</p><p>while循环内的两个代码其实就是相当于 数据j位置左边比temp值小的都向后平移一位。</p><p> j &gt; 1时的情况， 整体while循环的理解还是一样的。 而结尾的arr[i + 1] = temp也更加好理解。 将j左边所有比arr[j]的值向后移动一位之后，将arr[j]的值插入到其相应的位置，也就是我再开头所说的扑克牌排序。</p></blockquote><hr><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法内部包含一个嵌套循环，外循环一共执行 n - 1次。但是内循环会随着外循环的执行而改变</p><blockquote><p>当外循环执行一次时 内循环会进行一次比较</p><p>当外循环执行二次时 内循环会进行二次比较</p><p>· · · · · ·</p><p>当外循环执行n - 2次时 内循环会进行 n - 2次比较</p><p>当外循环执行n - 1次时 内循环会进行 n - 1次比较</p></blockquote><p>我们假设比较这个操作的时间复杂度为O(1) 那么整个算法的时间复杂度为</p><p>1 + 2 + · · · · · · + n -1 + n - 2 = n X ( n - 1) / 2 </p><p>可以认为时间复杂度为O(n^2^)</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>在整个算法运行的过程中，只开辟一个新空间用于数据交换，因此时间复杂度为O(1).</p><hr><h2 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h2><p>优化也只能优化常数时间，最差时间仍然无法优化。</p><p>如果想要优化可以再进行插入操作之前，找到要插入的位置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;内容来源《大话数据结构》和《算法导论》 图片源于 CSDN 英雄哪里出来&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="算法" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="算法" scheme="http://nhcyrus.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="插入排序" scheme="http://nhcyrus.top/tags/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://nhcyrus.top/posts/14e6f1eb.html"/>
    <id>http://nhcyrus.top/posts/14e6f1eb.html</id>
    <published>2022-09-04T08:50:03.000Z</published>
    <updated>2022-09-04T01:49:19.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><blockquote><p>内容来源于《大话数据结构》和《算法导论》 图片来源于 CSDN 英雄哪里出来</p></blockquote><hr><h2 id="什么是冒泡排序"><a href="#什么是冒泡排序" class="headerlink" title="什么是冒泡排序"></a>什么是冒泡排序</h2><p>冒泡排序可谓是最简单也是最容易理解的算法。就像是水里的泡泡一样，在同一深度出发，大的泡泡总是要比小的泡泡先到睡眠的。这句话的意思可不是冒泡排序只能做升序排序，所有的排序算法都是可以做升序和降序排序的。</p><p>下面动图将会演示冒泡排序的过程：</p><p><a href="/img/maopao.gif">alt 冒泡排序</a></p><hr><h2 id="插入排序的实现"><a href="#插入排序的实现" class="headerlink" title="插入排序的实现"></a>插入排序的实现</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">伪代码</button></li><li class="tab"><button type="button" data-href="#test1-2">C语言</button></li><li class="tab"><button type="button" data-href="#test1-3">Java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for i to arr.length</span><br><span class="line">for j = i + 1 to arr.length</span><br><span class="line">if(arr[j] &gt; arr[j + 1])</span><br><span class="line">temp = arr[j + 1]</span><br><span class="line">arr[j + 1] = arr[j]</span><br><span class="line">arr[j] = temp</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> *arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span> arr / <span class="number">4</span> - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="type">_Bool</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span> arr / <span class="number">4</span> ; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">          <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                  arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                  arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                  flag = <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> test: arr) &#123;</span><br><span class="line">          System.out.println(test);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>冒泡是要进行两两对比 内层for进行两两对比， 外层for循环确保每个数都参与对比</p></blockquote><hr><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>冒泡排序算法内包含一个嵌套循环。外层循环正好运行n - 1次。内层循环随着外层循环改变</p><blockquote><p>当外层进行第一次循环时 内层进行n - 1次比较</p><p>当外层进行第二次循环时 内层进行n - 2次比较</p><p>· · · · · ·</p><p>当外层进行n - 2次循环时 内层进行1次比较</p><p>当外层进行n - 1次循环时 内层进行0次比较</p></blockquote><p>我们假设比较的时间复杂度为O(1) </p><p>时间复杂度为 0 + 1 + · · · + (n - 1) + (n - 2) = n X (n - 1) / 2 即 O(n^2^)。</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>当需要进行交换时，会申请一个空间用于交换。因此空间复杂度时O(1)。</p><hr><h2 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h2><p>冒泡排序也是一个时间比较长的排序。</p><p>在其内部循环不进行交换时，我们可以直接跳过这一次循环，节省资源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;内容来源于《大话数据结构》和《算法导论》 图片来源于 CSDN 英雄哪里出来&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    <category term="算法" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
    <category term="算法" scheme="http://nhcyrus.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://nhcyrus.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="冒泡排序" scheme="http://nhcyrus.top/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://nhcyrus.top/posts/4a17b156.html"/>
    <id>http://nhcyrus.top/posts/4a17b156.html</id>
    <published>2022-09-04T01:49:19.549Z</published>
    <updated>2022-09-04T01:49:19.549Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
